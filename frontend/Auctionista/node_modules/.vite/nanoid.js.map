{
  "version": 3,
  "sources": ["../nanoid/url-alphabet/index.js", "../nanoid/index.dev.js"],
  "sourcesContent": ["let urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\nexport { urlAlphabet }\n", "import { urlAlphabet } from './url-alphabet/index.js'\nif (true) {\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don\u2019t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don\u2019t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, size, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * size) / alphabet.length)\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],
  "mappings": ";;;AAAA,IAAI,cACF;;;ACAF,IAAI,MAAM;AACR,MACE,OAAO,cAAc,eACrB,UAAU,YAAY,iBACtB,OAAO,WAAW,aAClB;AACA,UAAM,IAAI,MACR;AAAA;AAMJ,MAAI,OAAO,aAAa,eAAe,OAAO,WAAW,aAAa;AACpE,UAAM,IAAI,MACR;AAAA;AAIJ,MAAI,OAAO,WAAW,aAAa;AACjC,UAAM,IAAI,MACR;AAAA;AAAA;AAKN,IAAI,SAAS,WAAS,OAAO,gBAAgB,IAAI,WAAW;AAC5D,IAAI,eAAe,CAAC,UAAU,MAAM,cAAc;AAChD,MAAI,OAAQ,MAAM,KAAK,IAAI,SAAS,SAAS,KAAK,KAAK,OAAQ;AAC/D,MAAI,OAAO,CAAC,CAAG,OAAM,OAAO,OAAQ,SAAS;AAC7C,SAAO,MAAM;AACX,QAAI,KAAK;AACT,WAAO,MAAM;AACX,UAAI,QAAQ,UAAU;AACtB,UAAI,IAAI;AACR,aAAO,KAAK;AACV,cAAM,SAAS,MAAM,KAAK,SAAS;AACnC,YAAI,GAAG,WAAW;AAAM,iBAAO;AAAA;AAAA;AAAA;AAAA;AAKvC,IAAI,iBAAiB,CAAC,UAAU,SAAS,aAAa,UAAU,MAAM;AACtE,IAAI,SAAS,CAAC,OAAO,OAAO;AAC1B,MAAI,KAAK;AACT,MAAI,QAAQ,OAAO,gBAAgB,IAAI,WAAW;AAClD,SAAO,QAAQ;AACb,QAAI,OAAO,MAAM,QAAQ;AACzB,QAAI,OAAO,IAAI;AACb,YAAM,KAAK,SAAS;AAAA,eACX,OAAO,IAAI;AACpB,YAAO,QAAO,IAAI,SAAS,IAAI;AAAA,eACtB,OAAO,IAAI;AACpB,YAAM;AAAA,WACD;AACL,YAAM;AAAA;AAAA;AAGV,SAAO;AAAA;",
  "names": []
}
